using System;
using System.DirectoryServices.AccountManagement;
using Azure.Identity;
using Azure.Security.KeyVault.Secrets;
using Microsoft.Extensions.Logging;
public class SecretRotator
{
    private const string CredentialIdTag = "CredentialId";
    private const string ProviderAddressTag = "ProviderAddress";
    private const string ValidityPeriodDaysTag = "ValidityPeriodDays";
public static void RotateSecret(ILogger log, string secretName, string keyVaultName)
    {
        // Retrieve Current Secret
        var kvUri = "https://" + keyVaultName + ".vault.azure.net";
        var client = new SecretClient(new Uri(kvUri), new DefaultAzureCredential());
        KeyVaultSecret secret = client.GetSecret(secretName);
        log.LogInformation("Secret Info Retrieved");
// Retrieve Secret Info
        var credentialId = secret.Properties.Tags.ContainsKey(CredentialIdTag) ? secret.Properties.Tags[CredentialIdTag] : "";
        var providerAddress = secret.Properties.Tags.ContainsKey(ProviderAddressTag) ? secret.Properties.Tags[ProviderAddressTag] : "";
        var validityPeriodDays = secret.Properties.Tags.ContainsKey(ValidityPeriodDaysTag) ? secret.Properties.Tags[ValidityPeriodDaysTag] : "";
        log.LogInformation($"Provider Address: {providerAddress}");
        log.LogInformation($"Credential Id: {credentialId}");
// Check Active Directory connection
        CheckADConnection(secret);
        log.LogInformation("Active Directory Connection Validated");
// Create new password
        var randomPassword = CreateRandomPassword();
        log.LogInformation("New Password Generated");
// Add secret version with new password to Key Vault
        CreateNewSecretVersion(client, secret, randomPassword);
        log.LogInformation("New Secret Version Generated");
// Update Active Directory account with new password
        UpdateADPassword(secret, randomPassword);
        log.LogInformation("Password Changed");
        log.LogInformation($"Secret Rotated Successfully");
    }
private static void CheckADConnection(KeyVaultSecret secret)
    {
        using (var context = new PrincipalContext(ContextType.Domain, "YOUR_DOMAIN"))
        {
            if (!context.ValidateCredentials(secret.Name, secret.Value))
            {
                throw new Exception("Active Directory connection failed.");
            }
        }
    }
private static void UpdateADPassword(KeyVaultSecret secret, string newPassword)
    {
        using (var context = new PrincipalContext(ContextType.Domain, "YOUR_DOMAIN"))
        {
            using (var user = UserPrincipal.FindByIdentity(context, secret.Name))
            {
                if (user != null)
                {
                    user.SetPassword(newPassword);
                    user.Save();
                }
                else
                {
                    throw new Exception("User not found in Active Directory.");
                }
            }
        }
    }
private static string CreateRandomPassword()
    {
        const string validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()";
        var random = new Random();
        var chars = new char[12];
        for (int i = 0; i < chars.Length; i++)
        {
            chars[i] = validChars[random.Next(validChars.Length)];
        }
        return new string(chars);
    }
private static void CreateNewSecretVersion(SecretClient client, KeyVaultSecret secret, string newPassword)
    {
        var newSecret = new KeyVaultSecret(secret.Name, newPassword)
        {
            Properties =
            {
                Tags = secret.Properties.Tags
            }
        };
        client.SetSecret(newSecret);
    }
}
Make sure to replace "YOUR_DOMAIN" with your actual domain name. This code will check the Active Directory connection, generate a random password, update the password in Active Directory, and create a new secret version in Azure Key Vault. Let me know if you need any further assistance!
